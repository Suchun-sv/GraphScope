#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright 2020 Alibaba Group Holding Limited. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import openai, json
from .langchain_cypher import GraphCypherQAChain
from langchain.chat_models import ChatOpenAI
from langchain.graphs import Neo4jGraph

def query_to_cypher(graph, query: str, endpoint:str=None, api_key:str=None) -> str:
    """`query_to_cypher` function, is a simple wrapper around
    `LangChain <https://python.langchain.com/>`, which provides an effective communicated way to LLM.
        Args:
            graph (graphscope.Graph): the operation graph, which is used to provide context to the LLM.
            query (str): the nature lauguage query to be evaluated.
            endpoint (str): the endpoint of openai api.
            api_key (str): the api key of openai api.

        Returns:
            : str: the cypher query generated by LLM.
    """
    if endpoint is None:
        endpoint = "https://api.openai.com"
    if api_key is None:
        print("Please input your openai api key")
        return None

    chain = GraphCypherQAChain.from_llm(
        ChatOpenAI(openai_api_base=endpoint, openai_api_key=api_key, model_name="gpt-4", temperature=0),
        # ChatOpenAI(openai_api_base=endpoint, openai_api_key=api_key, model_name="gpt-3.5-turbo-0301", temperature=0),
        graph=graph,
        verbose=True,
        return_intermediate_steps=True
    )
    return chain.run(query)